@charset "utf-8";
//注释：less文件推荐用"//"的形式，不会被编译进css文件（另一种/**/注释会被编译进css文件）
body {
    color: #000;
}
//变量：声明变量用"@变量名:值;"的形式
.variable {
    @div_length: 100px;
    .variable1 {
        width: @div_length;
        height: @div_length;
        background-color: #F0F;
        display: inline-block;
    } //当变量在用于样式值以外的地方时，变量名外需要加上大括号
    @div: variable;
    .@{div}2 {
        width: @div_length;
        height: @div_length;
        background-color: #EA5;
        display: inline-block;
    }
    @image: lib;
    .variable3 {
        width: @div_length;
        height: @div_length;
        background: url("@{image}/50.jpg");
        display: inline-block;
        color: #CADE;
    }
}
@libs: lib;
@import "@{libs}/c.less";
//混合：将其他类直接拿过来使用，但是其他类须是当前类的同级类或父级类。
//混合的其他类可带变量参数，也可设置变量参数的默认值
.blend {
    div {
        display: inline-block;
    }
    .box1 {
        width: 100px;
        height: 100px;
        background-color: #0F0;
    } //在类后面加()能否不让它直接编译出来，只有在用的时候才进行编译，但在调用时也要加()
    .box2() {
        width: 100px;
        height: 100px;
        background-color: #0F0;
    }
    .blend1 {
        .box1;
        background-color: #CCC;
    } //带变量参数
    .border2(@border_width) {
        border: @border_width solid #349;
    }
    .blend2 {
        .box2();
        .border2(3px);
    } //为变量参数设置默认值
    .border3(@border_width: 8px) {
        border: @border_width solid #555;
    }
    .blend3 {
        .box1;
        .border3();
    }
    .blend4 {
        .box1;
        .border3(1px);
    }
}
//匹配模式：第一个参数为类型，相当于switch里的case,若第一个参数为"@_",相当于try里的finally
.match {
    div {
        display: inline-block;
    }
    .triangle(top,
    @width: 5px,
    @color: #000) {
        border-width: @width;
        border-color: transparent transparent @color transparent;
        border-style: dashed dashed solid dashed;
    }
    .triangle(bottom,
    @width: 5px,
    @color: #000) {
        border-width: @width;
        border-color: @color transparent transparent transparent;
        border-style: solid dashed dashed dashed;
    }
    .triangle(left,
    @width: 5px,
    @color: #000) {
        border-width: @width;
        border-color: transparent transparent transparent @color;
        border-style: dashed dashed dashed solid;
    }
    .triangle(right,
    @width: 5px,
    @color: #000) {
        border-width: @width;
        border-color: transparent @color transparent transparent;
        border-style: dashed solid dashed dashed;
    } //即便是在"@_"的情况下，后面的参数也都需要带上
    .triangle(@_,
    @width: 5px,
    @color: #000) {
        width: 0;
        height: 0;
        overflow: hidden;
    } //调用的时候第一个匹配参数为必填，若该参数匹配不到，亦会调用"@_"
    .match1 {
        .triangle(top);
    }
    .match2 {
        .triangle(bottom,
        10px);
    }
    .match3 {
        .triangle(left,
        10px,
        #EEE);
    }
    .match4 {
        .triangle(right);
    }
    .match5 {
        .triangle(abc);
    }
}
//运算：变量和数值能够进行加减乘除运算。
//不管数值带不带单位，计算结果均与变量一个单位
@div_length: 50px;
@div_radius: 20%;
.operation {
    height: @div_length + 50; //100px
    width: @div_length * 3px; //150px
    background-color: #FF0;
    border-radius: @div_radius + 30; //50%
}
//嵌套：尽量避免嵌套，嵌套次数越多会导致css匹配次数越多，所以建议能不嵌套的情况就不嵌套
.nesting {
    ul {
        list-style: none;
    }
    li {
        font-size: 20px;
        color: #00F; //"&"表示当前的上一层选择器
        &:hover {
            color: #F00;
        }
    }
    .title {
        line-height: 20px; //用"&"拼接元素或类，但仅限于父类(元素)的名称与子类(元素)名称的开头一致的情况
        &_a {
            text-decoration: none;
        }
    }
}
//@arguments：包含了所有传递进来的参数
.border(@width: 10px,
@color: #0f0,
@style: solid) {
    border: @arguments;
}

.arguments {
    //若想改动默认值，也可进行传参，如".border(20px, #000);"
    .border();
}
//避免编译：避免主动计算和编译样式中的表达式，直接原封不动输出，以免样式在浏览器中报错
//避免编译的表达式用~'表达式'或~"表达式"的形式
.avoidCompiled {
    width: ~'calc(100% - 500px)';
    background-color: #f90;
}
//条件表达式：使用比较运算符或者表达式的判断来输入我们的值，根据不同的条件来输出不同的值
.conditional {
    .width(@height)when(@height<50) {
        width: 80px;
    } //与
    .width(@height)when(@height>=50)and(@height<100) {
        width: 200px;
    } //或
    .height(@width)when(@width>=50),
    (@width<20) {
        height: 50px;
    }
    .conditional1 {
        height: 45px;
        .width(15);
        background-color: #ABB;
    }
    .conditional2 {
        height: 80px;
        .width(30);
        background-color: #DDA;
    }
    .conditional3 {
        width: 85px;
        .height(15);
    }
}
//循环：使用条件表达式+递归的形式遍历出一连串有规律的类
.loop {
    .loop1(@a)when(@a>0)and(@a<11) {
        .icon@{a} {
            width: 20px * @a;
        }
        .loop1(@a+1);
    }
    .loop1(1);
}
//!important：加在混合的类后面，会为所有混合类所带来的样式，均添加上!important
.important {
    .box(@width: 200px,
    @height: 200px) {
        width: @width;
        height: @height;
    } //匹配模式也是混合的一种
    .border1(blue) {
        border-width: 5px;
        border-color: blue;
        border-style: solid;
    }
    .box(100px,
    100px)!important;
    height: 50px;
    background-color: #000;
    color: #FFF;
    .border1(blue)!important;
    border-width: 10px;
}
//依赖注入：依赖注入的位置即是less或css插入当前less的位置
//通过使用@import "文件名"来注入less文件，也可以直接写出@import "a";
@import "a.less";
//通过使用@import (less) "文件名"来注入css文件，其中(less)是指将css转化为less
@import (less)"b.css";